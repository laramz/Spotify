[["introduction-to-your-project.html", "Data Science Project Guide: Spotify 1 Introduction to Your Project 1.1 Purpose of the Project Guide 1.2 What is this Project About? 1.3 Exploratory Data Analysis – getting to know the data set 1.4 Prediction – Apply Statistical Methods", " Data Science Project Guide: Spotify TechAcademy e.V. Summer Term 2021 1 Introduction to Your Project 1.1 Purpose of the Project Guide Welcome to the project guide for your TechAcademy Data Science project! This document will guide you through the different steps of your project and will provide you with useful hints along the way. However, it is not a detailed step by step manual, because we felt like it was important that you develop the skills of coming up with your own way of solving different tasks. This is a great way to apply the knowledge and tools you have acquired through DataCamp. It might happen that questions come up or that you don’t know how to solve a task right away—but don’t worry—this is just part of coding. In those cases you can also find helpful links in the introductory chapters, where your questions might already have been answered. If not, and in the unlikely case that even Google can’t help you, the TechAcademy mentors will help you via Slack or directly during the coding meetups. At the end of the project guide you will find an overview of all tasks that have to be completed, depending on your track (beginner/advanced). You can use this list to check which tasks still need to be completed and which tasks are relevant for your track. 1.2 What is this Project About? Last semester, we dealt with the COVID-19 outbreak, but to take your mind off things, we thought it would be a good idea to focus on a different topic this semester: the business model of Airbnb. More precisely, we are analyzing part of a very detailed data set of all Airbnb offers in Berlin. The data was scraped in November 2018, which means it was taken directly from the Airbnb website itself. You will find all kinds of information in the data set - useful and useless ones. Are you already curious to see for yourself? In analogy to the typical Data Science workflow, we split this project into two parts. First you are going to learn how to perform an Exploratory Data Analysis (EDA). You will have a closer look at the data, transform it and then get to know the different variables and what they look like in different types of visualizations. Beginners will have completed the project after this, but it will be beneficial to also try and work on the next part: In the second part of the project you will come up with a model that predicts Airbnb prices in Berlin as accurately as possible. You are going to start with a linear regression model, which you can modify as you please and then you can explore all the other possibilities of modeling and predicting data. But first things first: What exactly is EDA and what can you achieve with it? 1.3 Exploratory Data Analysis – getting to know the data set As a first step you will get to know the data set. This means you will describe the data and answer questions like “Which variables are contained in the data set? …and how are they related?” For this you can often use graphical tools like box plots or histograms. This first part of the project is structured in a way that lets you get to know the data thoroughly by completing the given tasks one after the other. As a beginner, you can stop after this part, because you will have fulfilled the necessary coding requirements for the certificate. However, if this first part inspires you to learn more, we encourage you to also work on the second part. This project guide is structured in the following format. Since the concept of Data Science is independent of specific programming languages, we will describe the general approach in this part of the text. After you understood the overall concept and the tasks we are asking you to do, you will find language-specific tips and tricks in visually separated boxes. If you participate in our R-program, you’ll only need to look at the boxes with the blue border. Conversely, you only need to look at the yellow-bordered boxes if you are coding in Python. From time to time it might be interesting to check out the other language – though you can do the same in both, they sometimes have a different approach to the identical problem. It makes sense that you complete the first few beginner chapters mentioned in the introductory chapter. We recommend that you finish the courses at least until and including Exploratory Data Analysis for both tracks. 1.4 Prediction – Apply Statistical Methods This part is mainly for the advanced TechAcademy participants. If you are a beginner and you were able to complete the first part without too many difficulties, we highly recommend trying to do the second part as well. Statistical models are a major part of data science and this is your chance of developing skills in this area. You got to know the data in the first part and you should be familiar with it so that it is now possible to use it to make predictions about Airbnb prices based on information you have about the apartments. After having completed the second part, you will send us your predictions and we will then check how accurate your model was. The best model will win! For this part of the project, we recommend the advanced courses mentioned in the introductory chapter. Please note that there are more courses available so if you want to extend your skills even further, feel free and complete more courses on the topics that interest you. We recommend that you finish the courses at least until and including Unsupervised Learning in Python for the Python track and Machine Learning Toolbox for the R track. Ready? After getting a first impression of what this project is all about, let’s get started! "],["exploratory-data-analysis.html", "2 Exploratory Data Analysis 2.1 Visualizing Apartment Availability 2.2 Visualize individual Airbnb offers with the listings dataset 2.3 Merging of Listings and Reviewing the Data Set 2.4 Visualization with Maps", " 2 Exploratory Data Analysis Before you can dive into the data, set up your programming environment. This will be the place where the magic happens – all your coding will take place there. In your workspace on rstudio.cloud we have already uploaded an “assignment” for you (Template Airbnb). When you create a new project within the workspace Class of ’20/21 | TechAcademy | Data Science with R, your own workspace will open up. We’ve already made some arrangements for you: The data sets that you will be working with throughout the project are already available in your working directory. We also created an ‘RMarkdown’ file, with which you will be able to create a detailed report of your project. You can convert this file into a PDF document when you have completed the documentation. Open the file “Markdown_Airbnb.Rmd” and see for yourself! We recommend using Google Colab for this project since it requires no particular setup, stores its notebooks to your Google Drive, and makes it easy for you to share them with your team members. As an alternative to Google Colab, you might want to install Jupyter Notebook locally using the Anaconda distribution. Either way, when importing Airbnb data, you can use the links to the respective data files provided in the “Data-Links” document, which you will find in the TechAcademy drive. We will give you a more detailed step by step demo during the first coding meetup. 2.1 Visualizing Apartment Availability 2.1.1 Import, Clean and Transform the Data In this section you will get to apply the basics of working with data: You will import, clean and transform the data so that you will then be able to visualize it in the next step. First the data set has to be loaded from your folder structure into the workspace. Import the calendar data set into your workspace and name the object accordingly. calendar &lt;- read.csv(\"calendar.csv\") Now get an overview of the data set. How is it structured and which variables does it contain? You can use the following functions, for example: head(calendar) str(calendar) summary(calendar) Import the pandas library to your notebook with import pandas as pd. Load the data from your csv-file into a data frame with pandas’ .read_csv() function. Have a look at the first rows of your data frame, print some descriptive statistics and get a brief summary of the data with the pandas methods .head(), .describe() and .info(). Take note of the data format of the “price” column – you’ll make use of that information in the next step. Visualization is one of the most helpful methods to get a feeling for the relation of the various variables of the data set. As already mentioned, this process is called Exploratory Data Analysis (EDA). Before we can start with that, we first have to clean the data such that the functions can process the data set properly. You will have to do that quite often in the field of Data Science, since the data very often comes in an unusable format. In our case, for example, the values in the price column are stored as type string – this becomes an issue when performing math operations. In order for R to process this, we need to remove a character from the observations and convert the variable into a numeric format. You can use the functions str_remove_all() or gsub() together with as.numeric() for this. To make the next step easier, we still have to convert the logical variable available from a character to a boolean data type. Use the ifelse() function for this and replace “f” and “t” with the associated logical values FALSE and TRUE. As a last step, transform the date variable into the R format date. Remember the as.numeric() function? R has a similar function to convert variables to a date format. To remove a character in a column’s cells use pandas’ .replace() method. Similarly, convert the data to a different type with .astype() (Hint: You will need to apply the replace method twice on the price column before converting). The column indicating if an apartment is available or not contains two types of values - “t” and “f” - which obviously stand for the boolean values True and False. To save you some headaches in the next task convert both values to be of type boolean. Our goal now is to show the number of Airbnb apartments that are available over the next year in a simple line plot. This is still not possible, however, since there currently is an entry for each apartment for each of the upcoming 365 days and another related variable that shows us whether the apartment is available or not on each of those days. The transformed data set should summarize this information and should only have one entry for each day that tells us the aggregated number of available Airbnbs in Berlin. The R package dplyr is the first choice for this type of transformation task. If you haven’t heard of it yet, take the respective DataCamp course and/or the DataCamp course about Exploratory Data Analysis. Use the dplyr functions group_by() and summarize() for this and save the resulting data set in a new data frame, which you can call “avail_by_date.” You can of course name the data frame however you wish. If you need further help, you can also use the dplyr Cheat Sheet for this task, on which the transformations are visually displayed. To sum the numbers of available apartments for each day you first need to filter the data frame by all available apartments. Now, understand the next step, remember that you converted the values in the “available” column to be of type bool before. In Python, the boolean value True is equal to 1, while False is equal to 0. Thus, (True + True + False) is equal to 2 (try it out: print(True + True + False)), and thus, you could now sum the entries in the available column to get the number of available apartments. So, first group the data frame by date with the .groupby()method and use .sum() to get the number of available apartments for each date. The pandas cheat sheet might be of help here - feel free to make use of it. 2.1.2 365 Days Lineplot We have finally transformed the data set into a useful format, so now it is time to actually visualize it. We are going to get started with a simple line plot that shows the number of available apartments over the next 365 days. This is what your result could look like: The following is a more refined example to show you how you can improve a simple line plot to a more complex and informative plot. The attention of the viewer can be brought to certain patterns this way. But don’t get caught up in all the little details, refine your plot to your liking and then move on to the next task. You can always come back to this and play around with the different refinement options. You can use the base package that includes the function plot() or you could use the more extensive and very flexible graphics package ggplot2. Having the data in the right format we can now start plotting a simple line graph. For this you can use matplotlib’s plt.plot(). Looking at the line plot, you can see a clear pattern with respect to different dates. There are distinct drops in the availability of the Airbnb apartments. One task for your project is to explain the cause behind this pattern. 2.2 Visualize individual Airbnb offers with the listings dataset After looking at the availability over time using the calendar data set in the first step, we would now like to find out a little more about the price structure of the available apartments. For this we need the listings data set that we can load into the workspace as usual. A closer look reveals that the price and cleaning_fee columns contain characters and once again need to be cleaned. Therefore, as in the first task, the dollar sign as well as the comma must be deleted from these columns. Since you use the same procedure for the price and cleaning_fee columns, a for-loop is recommended here. Implement this loop in a self-written function clean_price(), so that you save a lot of lines of code, especially in the prediction part. There are different ways to create this for-loop, so just experiment with what makes most sense to you. But you definitely want to iterate over all values within one column, so your for-loop function should contain for (i in 1:length(column_name)) where “column_name” only acts as a place holder for the variable you want to work on. Create a list containing the column names of both columns you want to iterate over. The for-loop body doesn’t necessarily need more than one line and might start like this: for column_name in column_names_list: df[column_name] = df[column_name].str.replace(.... Now that we have cleaned up the data set, we can take a closer look at the price structure of the various neighborhoods. First of all, we would like to know what the average price and the corresponding standard deviation is for each neighborhood. Make a list with the names of the different parts of the city as well as the mean and the sd. For this, you can again use dplyr-functions like group_by() or summarize(). Once again you can use the groupby method to group by neighborhood and apply the aggregation function .std() to get the standard deviations. Similarly, you can use .mean() to get the mean values. Filter both data frames by the price column. We now want to compare the price distribution for the on average most expensive district with the on average least expensive district. For this, you have to think about the different types of plots that you have gotten to know in your courses and have to find the plot type that is most suited for this type of visualization. Once you have created the diagram, you will probably have to filter out some of the outliers with extremely high prices in order to get a meaningful plot. In ggplot2 graphics, you can easily filter in the plot specifications with xlim or ylim. One way to find the on average most expensive neighborhood is to simply sort the mean price column in descending order. For plotting: The Matplotlib documentation is a great source of inspiration with many examples including code that generated them. On the Airbnb website, the available apartments can be sorted by price and are shown to the customer in the appropriate order. One method to end up higher in this ranking is to quote a low price and a higher cleaning fee. Can we see this behavior in our data set? To figure this out, create an additional column in your data frame with the name price_and_clean, in which you add both individual prices. Now examine how the price distribution changes in the two previously examined parts of the city. Compare the price and price + cleaning fee of a district in a diagram. What do you observe? 2.3 Merging of Listings and Reviewing the Data Set In the previous part you got to know and visualized the listings data set. However, one important piece of information is not included in this data set: How popular are the individual apartments? We use the number of reviews on Airbnb as a measure of this. This variable could later become very important for price prediction. Fortunately, we have another data set, reviews, in which the apartment ID and the date are saved for each individual review. Our goal now is to count the number of reviews for each individual apartment and to save them. Since we can also find the ID in the listings data set, we can use this variable to merge the two data sets. First load the new reviews data set into your workspace and take a closer look at it with the familiar functions. Now count the number of reviews per apartment. This works with the table() function or with group_by() and summarize(). Note, however, that you still have to convert the result of the table() function into a data.frame format for further processing. Count the number of reviews per apartament (i.e. per “listing_id”) with the functions you’re already familiar with at this point. You can use the groupby argument as_index=False to avoid setting the column id as index. Now look at the new data set. Does each ID have exactly one entry with the number of ratings? To be able to merge the data sets, you have to rename the newly generated variables in the new data set. Name the apartment ID analogous to the listings data set id, as well as the number of reviews n_reviews. This can be done with the function rename() from the dplyr package. Assign the new column names as a list to the .column attribute. If your data set looks like this, you can merge it with listings: You can use the following structure for merging: listings_reviews &lt;- merge(dataset1, dataset2, by = ...) Merge with listings_reviews=pd.merge(dataframe1,dataframe2,left_on=.... Take a look at the new data set. Is the new variable n_reviews in the correct data format? 2.3.1 Your First Barplot We now want to take a closer look at a smaller part of the data set: What do the most popular apartments have in common? As an indicator of the popularity of an offer we use the previously generated number of reviews n_reviews. Extract the 200 most reviewed apartments. One approach for this is to first sort the data set in descending order according to n_reviews and then to extract the first 200 entries into a new data set. Now you can easily visualize the districts in which the 200 most frequently reviewed apartments are located. A bar plot is ideal for this. Feel free to try other types of plots that can be used to best answer this question. This is what it could look like: The key commands that you can use for this within ggplot() are geom_bar() and coord_flip(). You can plot bar plots with both pandas and matplotlib. If you chose to plot with matplotlib, you could use the plt.barh() method. Additionally you might want to use methods like .set_yticks(), .set_yticklabels() and .invert_yaxis(). If Python throws you an AttributeError, then try working with the plt.gca() method. 2.4 Visualization with Maps This part will be the final and most advanced part of the EDA – but also the most rewarding. Anyone who knows the Airbnb website has probably also seen their map showing the locations of all apartments. We can do the same! The only difference is that our data gives us even more options to show what really interests us! To reduce complexity, use the smaller data set filtered in the third task with the 200 most frequently reviewed apartments for this task. We can then place actual objects on the map. Plot the 200 top rated listings on the map. If you have not solved task 3 yet, simply select 200 listings according to other criteria or at random to solve the task. It could look like this: There are different ways of creating a map with R, but the following tips will be about the ggmap package. Before you can download map material via an API interface, you have to define the corners of the map as coordinates. First define the height and width of the included coordinates. In the next step you can use this to define the exact corners relative to the coordinates in the data set. height &lt;- max(...) - min(...) width &lt;- max(...) - min(...) You can then define a vector, which you can call berlin_borders, for example. It is used to define the values for the edges of the map. You can add a small safety margin to the respective minima or maxima of the coordinates. Play around with the factors later to find a good section of the map. berlin_borders &lt;- c(bottom = min(listing_top200$latitude) - 0.1 * height, top = max(listing_top200$latitude) + 0.1 * height, left = min(listing_top200$longitude) - 0.1 * width, right = max(listing_top200$longitude) + 0.1 * width) Then we download the defined map section from the service provider Stamen Maps with the get_stamenmap() function and save it in an object. We are going to use yet another library, this one is called Folium. For this task you will need to work with its documentation which you can find online. Make sure the folium package is installed: You can install it directly from within your notebook by executing !pip install folium. Use folium’s Circle to draw a circle for each apartment at its location coordinates. You will need to use a for-loop to iterate over all 200 apartments. # Initiate the map m = folium.Map( location=[52.5, 13.4], tiles=&#39;Stamen Toner&#39;, zoom_start=11 ) # Use a for-loop to plot circles for lat, long in ... : # Your code here m # Displays the map In addition to the coordinates, there is a lot of information about each listing in our data. This time plot the apartments in different colors. Use the city districts as a distinguishing feature (also to easily see whether the district assignment actually works). It is sufficient if you implement the same plot as before, only with different colors. However, this is an example of how a more advanced plot can look like: This plot was created with ggmaps and the additional package concaveman and its function geom_mark_hull(), which draws polygons around a cluster of coordinates. The plot shown has been created in R. In Python you’ll simply color the dots differently for each neighborhood. The obvious solution for this task would be to filter the data frame by a neighborhood and to create a for loop plotting the circles for that specific neighborhood. Then, repeat this process for all the other neighborhoods using different colors. This approach would lead to repeating (and thus, bad looking) code: Can you find a better way? For some analyzes it is easier if you don’t just see points, but their distributions on a map. For example, to see where there are many apartments in a small space, you can display the apartment density. It could look like this: To create such a two-dimensional density plot you can use the geom_density2d() and stat_density2d() packages on the map. If you don’t know exactly how the individual arguments should be filled, you can always google for more help. No hints or tips here - it’s up to you to study the documentation for folium’s Heatmap and to come up with a (possibly) nice heatmap ;) Congratulations – based on your work with basic data transformations and many visualizations, you now have a solid understanding of the Airbnb offers in Berlin. With this, you have now successfully completed the first part of the project! If you are in the beginner group, your minimum requirements are hereby met. Nevertheless, we strongly recommend that you also have a look at the following part. There you’ll be developing methods to predict the price of an apartment! Sounds exciting, doesn’t it? "],["price-prediction-application-of-statistical-methods.html", "3 Price Prediction – Application of Statistical Methods 3.1 Examine the Correlation Between the Variables (train) 3.2 First Predictions with Simple Regression Models (train) 3.3 From Training to Testing – Making Predictions 3.4 Apply Advanced Machine Learning Algorithms", " 3 Price Prediction – Application of Statistical Methods In the previous part you got a feel for the data set. You now know which variables are included and a few characteristic properties of the data set. But so far, we have only visualized the data set. In this section we go a step further and use statistical methods to predict the price of individual Airbnb apartments as accurately as possible. In order to be able to compare your models at the end, we use a uniform metric according to which we can check the price predictions for accuracy. In our case this is the Root Mean Square Error (\\(RMSE\\)), i.e. the root of the average squared difference between the predicted (\\(\\hat{y}_i\\)) and actual value (\\(y_i\\)): \\[ RMSE = \\sqrt{\\frac{1}{N}\\sum_{i=1}^{N}{(\\hat{y}_i-y_i)^2}} \\] The closer the \\(RMSE\\) is to 0, the better your model predicts prices. In the following, your goal is therefore to reduce the \\(RMSE\\) of your various models as much as possible through continuous improvements. We use three different data sets for the following part, which you can find in the subfolder Full Data Set. These are based on a much more extensive data set that contains a total of 96 variables for each apartment. We have already done the test / train / validation split of the data so that each group works with the same data sets. Here is a brief description of what you need each of the data sets for: train.csv (60 %): You use this training data set to train your model. The model can learn the relationships between the variables based on the training data set that contains both, the variables needed to predict the prices and also the actual prices themselves. test.csv (30 %): With this test data set you can test how well your model predicts the price using data that has not been seen before. This will help you for example with recognizing under- or overfitting. val.csv (10 %): We have removed the price variable in this validation data set. At the end you apply your best model to it and send us your predictions for the variable price. We then compare these with the actual values (only known to us) with the help of the \\(RMSE\\) and will then choose the best model across all groups. Note that some adjustments are necessary in these three data sets. For example, all price variables are marked with a $ sign. As before, we need to remove these in order to be able to transform the values to a numeric format. Always keep in mind that you have to apply all transformations to all three data sets, otherwise you will not be able to apply your trained model to the test and validation data sets. 3.1 Examine the Correlation Between the Variables (train) First load the train.csv data set from the Full Data Set folder into your workspace. Now look at the variable names and the first entries to decide which variables could be useful for predicting the price. Select these (limit yourself to no more than 20 variables at first) plus price and save it in a new data frame. How are the individual variables related to each other? In other words, to what extent do the variables in the data set correlate with one another? Finding this out is extremely important for deciding which model specification to use later. A good place to start is to create a correlation matrix: Part of that is function cor() from the base package. Select all numerical variables in your data set with the help of sapply() and create a correlation matrix. The GGally package with the ggpairs() function provides a very practical plot for visualizing relationships between many variables. Select the four variables (and price) that you think most influence the price and create a ggpairs plot. Note that the plot quickly becomes illegible and takes a long time to create as soon as you plot significantly more than five variables. A handy library for plotting correlation matrices is the seaborn library: import seaborn as sns. Use its pairplot method and pass on the dataframe with the selected columns to visualize distributions and correlations. Additionally, you may want to plot a heatmap with sns.heatmap() which makes it even easier to see correlations. Which of your examined variables correlates most with price and which seems to be more independent from price? You now have a first impression over which variables could be important for your model. So let’s get to your first price prediction model! 3.2 First Predictions with Simple Regression Models (train) Now you can make use of your statistical knowledge. You will need a method with which you can predict the price of an Airbnb apartment for a specific day. A very simple first approach would be to use the average demand as the first prediction. However, this is almost certainly not the best prediction. In this case, your predicted price would be the same over all days and would ignore all factors that influence the price. Ever heard of linear regression? That would be a much better approach. Now you can use your statistics skills. First set up a model with the dependent variable price. In the previous exercise you examined different variables. Now choose the variable with the highest correlation to price and use that as the only independent variable. For example, your first regression model could look like this: \\[price_i = \\beta_0 + \\beta_1 bedrooms_i + \\epsilon_i\\] In R you can implement a simple linear regression with the function lm(). You then get the model summary with the summary() function. Define both dependent (y_train) and independent (X_train) variables and clean the data if necessary. For the next step the X_train values need to be reshaped .values.reshape(-1,1). Note: If you use more then one feature you don’t have to reshape your data. Import LinearRegression() from sklear.linear_model and train your model using LinearRegression().fit(). Does your independent variable have a statistically significant impact on apartment price? Probably yes, because we selected the variable most correlated with price. However, if we stick to this very simplified model, we are making a typical mistake: the so-called Omitted Variable Bias (OVB). To put it simply, we neglect (in statistics jargon: “do not control for”) variables that have a significant influence on the dependent variable. One could suspect that other influencing factors also play a large role in price setting. If we do not include them, the estimate of the effect of bedroomsis biased and thus hardly useful. In our case this is not a big problem for the time being, since we are not interested in causal effects, but rather in the best possible prediction. Your statistics professor would almost certainly object to such a model. Nonetheless, with just a single explanatory variable, this model will not necessarily predict the price well. One possible solution is to simply include the omitted variables in the model – how practical that these are already included in the data set. So let’s set up a somewhat more extensive model that includes one more variable: \\[price_i = \\beta_0 + \\beta_1 bedrooms_i + \\beta_2 cleaning\\_fee_i + \\epsilon_i\\] Now compare the results of the two models. Does the larger model explain a higher proportion of the variance in price? In other words, which model shows the higher value for the \\(R^2\\) measure? You can easily include such LaTeX tables in your RMarkdown document with the stargazer package: 3.3 From Training to Testing – Making Predictions You have now trained your first model with the training data set. But how well does the model handle data that it has not seen yet? This is a very important test to evaluate the quality of your model. Has your model only “memorized” the existing patterns in the training data set? Then the relationships from the training data set would not be transferable to the test data set. With so-called overfitting, the model was trained too closely to the training data set and therefore provides poor predictions for unknown data – for example the data in your test and validation data sets. On the other hand, there is also the problem of underfitting: Your model has not sufficiently learned the actual relationships between the data and therefore makes poor predictions in the test data set. So it is important to find a balance between the two problems. Now the distinction between training and test data sets becomes important. As a reminder: we use train data to train a model and the test data to ultimately test the quality of our model. Now load the data set test in addition to the data set train that you have already used. In order to test your model on previously unseen data, you can apply the model to the test data set. Use the predict function for this: predicted_price &lt;- predict(your_saved_model, your_test_data_frame) You have now created a vector with all price predictions for the test data set. You can now compare this with the actual values for price from test. In order to use a uniform comparison metric, please use the following function to measure your prediction accuracy: # Function that returns Root Mean Squared Error while ignoring NAs rmse &lt;- function(actual, predicted) { sqrt(mean((predicted - actual)^2, na.rm = TRUE)) } After training, import the data from the test.csv file, define both variables X_testand y_test, and create a vector with price predictions applying .predict(X_test) on your model. Store your prediction in the variable predicted_price. Finally, compare your predicted values with the test values: from sklearn.metrics import mean_squared_error # Function that returns Root Mean Squared Error while ignoring NaNs rmse = mean_squared_error(y_test, predicted_price, squared=False) Now compare both regression models. Does the larger model have better prediction accuracy, i.e. a lower \\(RMSE\\)? Now you have a benchmark for your more advanced models, which you can beat in the next part. 3.4 Apply Advanced Machine Learning Algorithms Now that you have created and tested an initial prediction using a simple regression model, you can now apply more advanced methods. The goal is still to get the lowest possible \\(RMSE\\) when applying the model to the test data set. Now look at at least one other algorithm and then see if that gives you a more accurate prediction (expressed as a lower \\(RMSE\\)). You can find inspiration for this in the advanced DataCamp courses, which are listed at the beginning of the project guide. There are no limits for you – you can refine the regression using certain methods (e.g. LASSO) or set up a random forest model or a neural network. It is usually a good idea to briefly recall the functionality of the respective algorithms and to consider whether this methodology makes sense in this case with a continuous prediction variable. At this point, a disclaimer is appropriate: Our data set has a substantial part of missing observations (NA) for many variables. Some machine learning algorithms require a complete set of data with no missing values, while others can do well with a smaller number. If you get into trouble about the missing values, check whether you can impute the missing values. Which method is best for imputation depends heavily on your prediction algorithm. You can also get a noticeable gain in predictive power by modifying existing variables or generating new variables from the data set (“feature engineering”). For example, we could imagine that the distance from an apartment to the city center has a significant impact on the price. However, this variable is not included in our data set. You can write a simple function that uses the two coordinate variables to calculate the distance to the center of Berlin and appends this to the data set as a new variable. Always compare the \\(RMSE\\) of your advanced models with each other, as well as with the benchmark regression model from before. Did you find your best model? Then predict prices with your winning model as above – but this time on the validation data set val.csv. Attach a .csv dataset in the following format with only the two variables id and predicted_price as an attachment to your project submission. You can do this by adding the two vectors id and predicted_price together and saving them as a .csv file. submission &lt;- cbind(val$id, predicted_price_val) write.csv(submission, &quot;submission_&lt;&lt;TEAM NAME&gt;&gt;.csv&quot;, row.names=FALSE) You may need to do some mapping operations between the train.csv data and the predictions to get to the data frame with id and predicted prices. Similarly as with the pd.read_csv(path/to/file.csv) method to load data, you can also write data with the df.to_csv(file.csv) method. Congratulations! You’ve made it to the end of your TechAcademy Data Science project. After visualizing the data in the first part, you’ve also set up predictive models in this section. If you stuck around until this part and managed to code the better part of the exercises, you’ve definitely earned your certificate! We hope you had fun learning Data Science with this data set and you enjoyed it – at least the parts where you didn’t get stuck forever because of some unexplainable coding error. Don’t forget to send your project results and the prediction-csv file you just generated to our project submission email address before the deadline. "],["excercise-checklist.html", "4 Excercise Checklist", " 4 Excercise Checklist This checklist should help you keeping track of your exercises. Remember that you have to hand in satisfactory solutions to at least two thirds of the exercises. If you’re part of the beginner track this refers to two thirds of part A (EDA) only. If you’re part of the advanced track, you have to hand in at least two thirds of both individual parts A and B. Hence, you cannot hand in 100 percent of the first part and only 50 percent of the second one. You’ll need more than 66% in each one for a certificate. After all, you’re not really that advanced if you only did half of it, right? Part A: Exploratory Data Analysis (Beginners + Advanced) Visualize the available apartments (calendar dataset): Transform t/f to boolean values True/False Aggregate data after dates Plot available apartments over time Visualize the listings dataset Clean and transform the price and cleaning_fee columns to numeric values Compute mean and standard deviation of apartment prices for each neighborhood Visualize the price distribution for the most and least expensive district Visualize if cleaning_fee was used to hide costs Merging of listings and review data set Aggregate reviews by ID Merge listings and aggregated reviews data Filter and plot amount of apartments in each district Visualize apartments on map Draw a circle for every available apartment on map Colorize each circle according to its districts Draw a 2D-density plot Part B: Price Prediction Using Statistical Methods ((motivated) Beginners + Advanced) Visualize feature correlations in a correlation matrix/heatmap Regression Simple regression model using one variable Improve your model using more features Test your model Use test data set to predict prices of the apartments Compare your predictions with the true values Train a new model using a more advanced method, send us your model and the predictions of your best model "],["whats-next-in-your-data-science-career.html", "5 What’s Next in Your Data Science Career? 5.1 Data Science in General 5.2 R 5.3 Python", " 5 What’s Next in Your Data Science Career? At the end of your TechAcademy semester, you’ve successfully coded your way through a whole Data Science project. You liked what you did and would like bring your skills to the next level? Then this section provides you with many useful resources to deepen your knowledge in Data Science in general or Python and R in particular. The first section is useful for every aspiring Data Scientist, while the two following boxes introduce you to some language-specific resources. If you’ve come across some other useful materials that we didn’t mention here, feel free to contact us – this list is far from complete! 5.1 Data Science in General Version Control with Git If you’re serious about data science, you will need Git. Better learn it early and start enjoying and appreciating it before it’s too late and you’re pressured into learning it on the fly! Every project you do should be versioned with Git. Regardless if you’re working alone or with a big group of developers. Regardless if you write ten lines of code or a really complex program. With Git, you can keep track of all your changes. It’s like a Dropbox/Google Drive for developers, but way better. Pro-Tip: Get free GitHub Pro as a Student with the GitHub Student Developer Pack. Besides all the perks of GitHub Pro, you’ll also free access to many other great tools. See the respective tutorials on how to set up your Git workflow. Advice for Non-Traditional Data Scientists Important advice from Gordon Shotwell, a former lawyer, on what it takes to have a successful data science career coming from a non-computer science background. Extremely encouraging and helpful read on what you should and shouldn’t do to reach that goal. Learn from Great Data Scientists on Kaggle Kaggle is a platform that hosts data science challenges. The great thing about it is that you can browse through many clever solutions to tricky machine learning tasks. And of course, you can also join the competition and measure your predictions with others. There are plenty of both Python and R notebooks. 5.2 R Install R and RStudio Locally RStudio.Cloud is great for getting started with R without having to worry about installing anything locally. Sooner or later you will have to install everything on your own computer. Here’s a DataCamp tutorial on how to do that. Version Control with Git RStudio has a nice interface that lets you enjoy the perks of Git without ever having to touch the command line – sounds great, does it? Learn how to set up the Git &amp; R workflow with Happy Git with R. R Graph Gallery Get inspiration to take your plotting to the next level. Includes code to reproduce the plots. Follow the R Master Himself and the R Community Hadley Wickham was and continues to be extremely influential on the development of R and its rise to one of the most popular data science languages. He’s behind many tools that we taught you in this semester, especially the tidyverse (including great packages such as ggplot2 and dplyr). Follow him on Twitter to get great R advice and keep up to speed with everything new to R. Following the many people behind R (not only Hadley) is a great way for acquiring deeper understanding of the language and its developments. Join the Campus useR Group in Frankfurt There’s a quite active R community in Frankfurt that meets once a month. It’s open for students, professors, industry practitioners, journalists, and all people that love to use R. In those meetings, you’ll hear about other’s work, discuss new developments, and ask questions. Listen to R Podcasts Another great way to easily keep up with new developments in the Data Science/R community. Check out Not So Standard Deviations or the R-Podcast 5.3 Python Install Python Locally Until now you’ve only programmed using JupyterHub on the TechAcademy Server. A next step would be to install Python and Jupyter locally on your computer. This link contains the necessary information on how to install the software on Windows, iOS or Linux. Choosing the Right Editor Using Jupyter is especially useful for short data analyses. But sometimes you want to write longer scripts in Python. In these cases, it is often more convenient to use a code editor instead of Jupyter. This tutorial highlights the positive aspects of such an editor and how to choose the right one for you. Pro Tip: Also check out the other tutorials on Real Python. Python Graph Gallery Get inspiration to take your plotting to the next level. Includes code to reproduce the plots. More Advanced Python Concepts You know the basic data structures in Python like lists and dictionaries. What are the next steps to improve your knowledge? This website gives good explanations for slightly more advanced concepts which can be very useful from time to time. A Deeper Understanding If you want to get a deeper understanding of the Python programming language and into typical algorithms which are used in the field of Data Science, this free book can be a good starting point. Writing Beautiful Python Code “My code doesn’t look nice, but it works!” This might work for yourself, but often you will work on code with other people. But even if you’re just coding for yourself it’s a good idea to follow the PEP8 style guide. It’s a useful convention on how to structure and code in Python. You’ll find useful resources for PEP8 here and here. Listen to Python Podcasts When you don’t have time for books you can listen to Talk Python or the Python Podcast. "]]
